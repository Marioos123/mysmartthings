/**
 *  Copyright 2015 SmartThings
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 * 
 */
metadata {
	definition (name: "LC13 TRV V1.1", namespace: "Danfoss", author: "RichardP") {
		capability "Actuator"
		capability "Temperature Measurement"
		capability "Relative Humidity Measurement"
		capability "Thermostat"
		capability "Configuration"
		capability "Polling"
		capability "Sensor"
        capability "Battery"
		
		attribute "thermostatFanState", "string"

		command "switchMode"
		command "switchFanMode"
        command "quickSetCool"
        command "quickSetHeat"

		fingerprint deviceId: "0x0804"
		fingerprint inClusters: "0x80, 0x46, 0x81, 0x72, 0x8F, 0x75, 0x43, 0x86, 0x84"
	}

	// simulator metadata
simulator {
//		status "off"			: "command: 4003, payload: 00"
//		status "heat"			: "command: 4003, payload: 01"
//		status "cool"			: "command: 4003, payload: 02"
//		status "auto"			: "command: 4003, payload: 03"


		// reply messages
		reply "2502": "command: 2503, payload: FF"
}
	tiles {
		valueTile("temperature", "device.currentHeatingSetpoint", width: 3, height: 2) {
			state("device.currentHeatingSetpoint", label:'${currentValue}Â°',
                  backgroundColors:[
                       [value: 0, color: "#ededed"],
                       [value: 4, color: "#153591"],
                       [value: 16, color: "#178998"],
                       [value: 18, color: "#199f5c"],
                       [value: 20, color: "#2da71c"],
                       [value: 21, color: "#5baa1d"],
                       [value: 22, color: "#8aae1e"],
                       [value: 23, color: "#b1a81f"],
                       [value: 24, color: "#b57d20"],
                       [value: 26, color: "#b85122"],
                       [value: 28, color: "#bc2323"]
				]
			)
		}
	
        controlTile("heatSliderControl", "device.nextHeatingSetpoint", "slider", height: 1, width: 2, inactiveLabel: false, range:"(4..28)" ) {
			state "setNextHeatingSetpoint", action: "quickSetHeat", backgroundColor:"#d04e00"
		}
		valueTile("nextHeatingSetpoint", "device.nextHeatingSetpoint", inactiveLabel: false, decoration: "flat") {
			state "setNextHeatingSetpoint", label:'${currentValue}Â° next', backgroundColor:"#ffffff"
		}

		main "temperature"
		details(["temperature", "heatSliderControl", "nextHeatingSetpoint"])
	}
}

def parse(String description) 
{
    state.count = 0
    def results = []
    log.debug("RAW command: $description")
	if (description.startsWith("Err")) {
		log.debug("An error has occurred")
		} 
    else {
       	def cmd = zwave.parse(description,[0x80: 1, 0x46: 1, 0x81: 1, 0x72: 2, 0x8F: 1, 0x75: 2, 0x43: 2, 0x86: 1, 0x84: 2])
        log.debug "Parsed Command: $cmd"
        if (cmd) {
       	results = zwaveEvent(cmd)
		}
    }
}


// Event Generation
def zwaveEvent(physicalgraph.zwave.commands.thermostatsetpointv2.ThermostatSetpointReport cmd)
{
	def cmdScale = cmd.scale == 1 ? "F" : "C"
	def map = [:]
	map.value = convertTemperatureIfNeeded(cmd.scaledValue, cmdScale, cmd.precision)
	map.unit = getTemperatureScale()
	map.displayed = false
    map.name = currentHeatingSetpoint
//    log.debug ("Parsed Thermostat Set Point: $map)

	// So we can respond with same format
	state.size = cmd.size
	state.scale = cmd.scale
	state.precision = cmd.precision
	map
    sendEvent(map)
}

def zwaveEvent(physicalgraph.zwave.commands.batteryv1.BatteryReport cmd) {
        def map = [ name: "battery", unit: "%" ]
        if (cmd.batteryLevel == 0xFF) {  // Special value for low battery alert
                map.value = 1
                map.descriptionText = "${device.displayName} has a low battery"
                map.isStateChange = true
        } else {
                map.value = cmd.batteryLevel
                log.debug ("Battery: $cmd.batteryLevel")
        }
        // Store time of last battery update so we don't ask every wakeup, see WakeUpNotification handler
        state.lastbatt = new Date().time
        createEvent(map)
}

// Battery powered devices can be configured to periodically wake up and check in. They send this
// command and stay awake long enough to receive commands, or until they get a WakeUpNoMoreInformation
// command that instructs them that there are no more commands to receive and they can stop listening

def zwaveEvent(physicalgraph.zwave.commands.wakeupv2.WakeUpNotification cmd)
{
    def result = [createEvent(descriptionText: "${device.displayName} woke up", isStateChange: false)]
   // Only ask for battery if we haven't had a BatteryReport in a while
   if (!state.lastbatt || (new Date().time) - state.lastbatt > 24*60*60*1000) {
       result << response(zwave.batteryV1.batteryGet())
       result << "delay 2000"
       }
    //send nextHeatingSetpoint to thermostat during wakeup
    zwave.thermostatSetpointV1.thermostatSetpointSet(setpointType: 1, scale: deviceScale, precision: p, scaledValue: 28.0).format()
    result << "delay 2000"
    result << response(zwave.wakeUpV2.wakeUpNoMoreInformation())
    result
}

def zwaveEvent(physicalgraph.zwave.commands.basicv1.BasicReport cmd) {
	log.debug "Zwave event received: $cmd"
}

def zwaveEvent(physicalgraph.zwave.Command cmd) {
	log.warn "Unexpected zwave command $cmd"
}

// Command Implementations
def poll() {
	delayBetween([
        zwave.thermostatSetpointV2.thermostatSetpointGet(setpointType: 1).format(),
    ], standardDelay)
}

/*
def quickSetHeat(upDown) {
	def change = upDown
    def latest = device.latestValue("currentHeatingSetpoint")
    log.debug("currentHeatingSetPoint: $device.latestvalue")

    if (change == 1) {
    	def newSetPoint = latest + 1
        log.debug("New Set Point: $newSetPoint")
		state.setPoint = newSetPoint
        log.debug("New State Set Point: $state.setPoint")
    	setNextHeatingSetpoint(newSetPoint, 1000)
    }
    else if (change == 0) {
    	def newSetPoint = latest - 1
        log.debug("New Set Point: $newSetPoint")
        state.setPoint = newSetPoint
        log.debug("New State Set Point: $state.setPoint")
    	setNextHeatingSetpoint(newSetPoint, 1000) 
    }
}
*/

def quickSetHeat(degrees) {
	setNextHeatingSetpoint(degrees, 1000)
}

def nextHeatingSetpoint(degrees, delay = 30000) {
	setNextHeatingSetpoint(degrees.toDouble(), delay)
}

def setNextHeatingSetpoint(Double degrees, Integer delay) {
	log.trace "nextHeatingSetpoint($degrees, $delay)"
	def deviceScale = state.scale ?: 2
	def deviceScaleString = deviceScale == 2 ? "C" : "F"
    def locationScale = getTemperatureScale()
	def p = (state.precision == null) ? 1 : state.precision

    def convertedDegrees
    if (locationScale == "C" && deviceScaleString == "F") {
    	convertedDegrees = celsiusToFahrenheit(degrees)
    } else if (locationScale == "F" && deviceScaleString == "C") {
    	convertedDegrees = fahrenheitToCelsius(degrees)
    } else {
    	convertedDegrees = degrees
    }
    sendEvent(name:"nextHeatingSetpoint", value:convertedDegrees, isStateChange: true)

	delayBetween([
		zwave.thermostatSetpointV1.thermostatSetpointSet(setpointType: 1, scale: deviceScale, precision: p, scaledValue: convertedDegrees).format(),
		zwave.thermostatSetpointV1.thermostatSetpointGet(setpointType: 1).format()
	], standardDelay)
}

def configure() {
	delayBetween([
        zwave.configurationV1.configurationSet(parameterNumber:1, size:2, scaledConfigurationValue:100).format(),
        zwave.associationV1.associationSet(groupingIdentifier:1, nodeId:[zwaveHubNodeId]).format(),    	
        zwave.wakeUpV1.wakeUpIntervalSet(seconds:300, nodeid:zwaveHubNodeId).format()
	], standardDelay)
}

private getStandardDelay() {
	1000
}
